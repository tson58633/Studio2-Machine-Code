#include <HX711.h>
#include <NewPing.h>
#include <Servo.h>


// HX711 pins
#define HX711_DT_PIN 2 //Green
#define HX711_SCK_PIN 3 //Yellow

// Ultrasonic sensor pins
#define TRIGGER_PIN  12
#define ECHO_PIN     11
#define MAX_DISTANCE 200

// Servo motor pins
#define SERVO_PIN 9 // Define the servo motor control pin
Servo servo;     // Create a servo object

// Moving average settings
const int numReadings = 10;
float readings[numReadings];
int index = 0;
float total = 0;
float average = 0;
int angle = 0;
float outlierThreshold = 0.3; // Remove any readings that are more than 30% away from the average

// Calibration factor and zero drift correction
#define CALIBRATION_FACTOR -433.35
#define ZERO_DRIFT_CORRECTION 0.0

HX711 scale;
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

void setup() {
  Serial.begin(9600);
  Serial.println("Initializing HX711...");
  scale.begin(HX711_DT_PIN, HX711_SCK_PIN);
  scale.set_scale(CALIBRATION_FACTOR);
  scale.tare();
  Serial.println("HX711 Initialized!");
  servo.attach(SERVO_PIN); // Attach the servo motor to the specified pin
  angle = 0;
  servo.write(angle);
  for (int i = 0; i < numReadings; i++) {
    readings[i] = 0;
  }
  Serial.println("Moving average array initialized.");

  Serial.println("Servo motor initialized.");

  Serial.println("System ready.");
}

void loop() {

  int distance = sonar.ping_cm();
  // Add the new reading to the moving average
  total = total - readings[index] + distance;
  readings[index] = distance;
  index = (index + 1) % numReadings;
  average = total / numReadings;

  if (Serial.available() > 0) {
    char command = Serial.read();
    Serial.print("Received command: ");
    Serial.println(command);



    if (command == 'D') {
      digitalWrite(12, LOW);
      delayMicroseconds(2);
      digitalWrite(12, HIGH);
      delayMicroseconds(10);
      digitalWrite(12, LOW);

    // Measure the echo pulse duration and calculate the distance
    long duration = pulseIn(11, HIGH);
    //int distance = duration / 58;
    int distance = sonar.ping_cm();

  // Add the new reading to the moving average
  total = total - readings[index] + distance;
  readings[index] = distance;
  index = (index + 1) % numReadings;
  average = total / numReadings;

  // Filter out any outliers in the distance readings
  float deviation = abs(distance - average) / average;
  if (deviation > outlierThreshold) {
    // Discard the reading and use the previous average instead
    Serial.println("Discarded outlier reading.");
    distance = average;
  }
    // Send the distance reading to Processing over the serial port
    Serial.write(distance);
    delay(50);
    } else if (command == 'W') {
      float currentWeight = scale.get_units() - ZERO_DRIFT_CORRECTION;
      total -= readings[index];
      readings[index] = currentWeight;
      total += currentWeight;
      index = (index + 1) % numReadings;

      average = total / numReadings;
      //Serial.print("Average weight: ");
      //Serial.print(average, 2);
      //Serial.println(" g");
      // Send the average weight value to the Processing sketch
      Serial.println(average, 2);
      average = average - 58;
      int FW = average;
      Serial.write(FW);
    } else if (command == 'S') { // Add a new command for controlling the servo motor
      angle = 75;
      servo.write(angle); // Set the servo motor to the specified angle
      Serial.print("Servo motor set to: ");
      Serial.print(angle);
      Serial.println(" degrees");
    } else if (command == 'A') { // Add a new command for controlling the servo motor
      angle = 0;
      servo.write(angle); // Set the servo motor to the specified angle
      Serial.print("Servo motorA set to: ");
      Serial.print(angle);
      Serial.println(" degrees");
    }

  }
}
